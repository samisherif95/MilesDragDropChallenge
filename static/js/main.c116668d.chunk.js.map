{"version":3,"sources":["logo.svg","rewards.js","category.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ItemTypes","Rewards","name","idx","changeRewardPos","createID","catID","useDrag","item","type","begin","monitor","collect","isDragging","drag","className","ref","style","opacity","fontWeight","cursor","onClick","Category","index","showRewards","createNewRewardObject","console","log","useDrop","accept","drop","undefined","App","useState","savedrewards","window","localStorage","getItem","length","JSON","parse","initializedRewards","setInitializedRewards","savedAmountOfRewards","AmountOfRewards","setAmountOfRewards","map","reward","key","categoryIdx","currRewards","Object","assign","rewardID","some","newReward","push","rewardIdx","findIndex","splice","useEffect","setItem","stringify","pop","Boolean","location","hostname","match","ReactDOM","render","StrictMode","DndProvider","backend","HTML5Backend","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"+JAAAA,EAAOC,QAAU,IAA0B,kC,8JCG9BC,EACH,SAsCKC,MAnCf,YAAmE,IAAhDC,EAA+C,EAA/CA,KAAMC,EAAyC,EAAzCA,IAAKC,EAAoC,EAApCA,gBAAiBC,EAAmB,EAAnBA,SAAUC,EAAS,EAATA,MAAS,EACjCC,YAAQ,CACrCC,KAAM,CAAEC,KAAMT,GACdU,MAAO,SAACC,GAAD,MAAc,CACnBF,KAAMT,EACNG,IAAKA,EACLD,KAAMA,EACNI,MAAOA,EACPD,SAAUA,IAEZO,QAAS,SAACD,GAAD,MAAc,CACrBE,aAAcF,EAAQE,iBAXsC,mBACvDA,EADuD,KACvDA,WAAcC,EADyC,KAehE,OACE,yBACEC,UAAS,sBAAiBb,GAC1Bc,IAAKF,EACLG,MAAO,CACLC,QAASL,EAAa,GAAK,EAC3BM,WAAY,OACZC,OAAQ,SAGTlB,EAECE,EACE,0BAAMW,UAAU,eAAeM,QAAS,kBAAMjB,EAAgBC,KAA9D,MACA,OCZKiB,MApBf,YAAuF,IAApEpB,EAAmE,EAAnEA,KAAMqB,EAA6D,EAA7DA,MAAOC,EAAsD,EAAtDA,YAAapB,EAAyC,EAAzCA,gBAAiBqB,EAAwB,EAAxBA,sBAC5DC,QAAQC,IAAIF,GADwE,MAErDG,YAAQ,CACrCC,OAAQ7B,EAGR8B,KAAM,SAACtB,EAAMG,QACIoB,IAAfvB,EAAKF,MAAsBF,EAAgBI,EAAKH,SAAUkB,GAASE,EAAsBF,EAAOf,MAPhB,mBAE7DsB,GAF6D,WAUpF,OACE,yBAAKf,UAAU,iBACb,yBAAKA,UAAU,iBAAiBb,GAChC,yBAAKa,UAAU,gBAAgBC,IAAKc,GACjCN,EAAYD,MC6HNS,MAxIf,WACE,IADa,EAIuCC,oBAAS,WAC3D,IAAIC,EAAeC,OAAOC,aAAaC,QAAQ,iBAAmB,GAIlE,OAH4B,IAAxBH,EAAaI,SACfJ,EAAeK,KAAKC,MAAMN,IAErBA,KATI,mBAINO,EAJM,KAIcC,EAJd,OAWiCT,oBAAS,WACrD,IAAIU,EAAuBR,OAAOC,aAAaC,QAAQ,kBAAoB,EAI3E,OAH6B,IAAzBM,IACFA,EAAuBJ,KAAKC,MAAMG,IAE7BA,KAhBI,mBAWNC,EAXM,KAWWC,EAXX,KAyBb,SAASrB,EAAYlB,GAEnB,OADAoB,QAAQC,IAAIc,GACLA,EAAmBK,KAAI,SAACC,EAAQ5C,GACrC,GAAI4C,EAAOzC,QAAUA,EACnB,OACE,kBAAC,EAAD,CACE0C,IAAK7C,EACLD,KAAM6C,EAAO7C,KACbG,SAAU0C,EAAO1C,SACjBF,IAAK4C,EAAO5C,IACZG,MAAOA,EACPF,gBAAiBA,OAe3B,SAASqB,EAAsBwB,EAAazC,GAC1C,IAAI0C,EAAcC,OAAOC,OAAO,GAAIX,GAChCY,EAAW7C,EAAKL,IAIpB,IACG+C,EAAYI,MAAK,SAACP,GACjB,OAAOA,EAAO5C,MAAQkD,GAAYN,EAAOzC,QAAU2C,KAErD,CACA,IAAIM,EAAY,CACdrD,KAAMM,EAAKN,KACXC,IAAKK,EAAKL,IACVE,SAAUuC,EAAkB,EAC5BtC,MAAO2C,GAGTC,EAAYM,KAAKD,GACjBb,EAAsBQ,GACtBL,EAAmBD,EAAkB,IAKzC,SAASxC,EAAgBC,EAAU4C,GACjC,IAAIC,EAAcC,OAAOC,OAAO,GAAIX,GAChCgB,EAAYP,EAAYQ,WAAU,SAACX,GAAD,OAAYA,EAAO1C,WAAaA,KAEtE,QAAoB0B,IAAhBkB,EAA2B,CAC7B,IAAIF,EAASG,EAAYO,GAGzB,GACGP,EAAYI,MAAK,SAAC9C,GACjB,OAAOA,EAAKL,MAAQ4C,EAAO5C,KAAOK,EAAKF,QAAU2C,KAOnD,OAJAvB,QAAQC,IAAIoB,GACZA,EAAOzC,MAAQ2C,OAOjBC,EAAYS,OAAOF,EAAW,GAGhCf,EAAsBQ,GAIxB,OArFAU,qBAAU,WAERzB,OAAOC,aAAayB,QAAQ,eAAgBtB,KAAKuB,UAAUrB,IAC3DN,OAAOC,aAAayB,QAAQ,eAAgBtB,KAAKuB,UAAUlB,MAC1D,CAACH,EAAoBG,IAkFtB,yBAAK7B,UAAU,OACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,WACb,0BAAMA,UAAU,eAAhB,WA3GQ,CAAC,KAAM,KAAM,KAAM,KAAM,MA4GxB+B,KAAI,SAAC5C,EAAMC,GAClB,OAAO,kBAAC,EAAD,CAAS6C,IAAK7C,EAAKA,IAAKA,EAAKD,KAAMA,QAG9C,yBAAKa,UAAU,cACb,0BAAMA,UAAU,iBAAhB,cACA,yBAAKA,UAAU,mBAjHJ,CAAC,KAAM,KAAM,KAAM,KAAM,MAkHtB+B,KAAI,SAAC5C,EAAMC,GACrB,OACE,kBAAC,EAAD,CACE6C,IAAK7C,EACLD,KAAMA,EACNqB,MAAOpB,EACPqB,YAAaA,EACbC,sBAAuBA,EACvBrB,gBAAiBA,SAM3B,4BAAQiB,QAtFd,WACC,IAAI6B,EAAcC,OAAOC,OAAO,GAAIX,GACpCS,EAAYa,MACZrB,EAAsBQ,KAmFjB,WC7HYc,QACW,cAA7B7B,OAAO8B,SAASC,UAEe,UAA7B/B,OAAO8B,SAASC,UAEhB/B,OAAO8B,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,CAAaC,QAASC,KACpB,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLzD,QAAQyD,MAAMA,EAAMC,c","file":"static/js/main.c116668d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport { useDrag } from \"react-dnd\";\n\nexport const ItemTypes = {\n  REWARD: \"reward\",\n};\n\nfunction Rewards({ name, idx, changeRewardPos, createID, catID }) {\n  const [{ isDragging }, drag] = useDrag({\n    item: { type: ItemTypes.REWARD },\n    begin: (monitor) => ({\n      type: ItemTypes.REWARD,\n      idx: idx,\n      name: name,\n      catID: catID,\n      createID: createID,\n    }),\n    collect: (monitor) => ({\n      isDragging: !!monitor.isDragging(),\n    }),\n  });\n\n  return (\n    <div\n      className={`reward-item-${name}`}\n      ref={drag}\n      style={{\n        opacity: isDragging ? 0.5: 1,\n        fontWeight: \"bold\",\n        cursor: \"move\",\n      }}\n    >\n      {name}\n      {\n        changeRewardPos ? \n          <span className=\"deletebutton\" onClick={() => changeRewardPos(createID)}> X</span>\n        : null\n      }\n    </div>\n  );\n}\n\nexport default Rewards;\n","import React from \"react\";\nimport { useDrop } from \"react-dnd\";\nimport { ItemTypes } from './rewards';\n\nfunction Category({name, index, showRewards, changeRewardPos, createNewRewardObject}) {\n  console.log(createNewRewardObject);\n  const [collectedProps, drop] = useDrop({\n    accept: ItemTypes.REWARD,\n    //checks if there is a category Id for the reward(item) and if yes then changes the \n    // category column if no creates a new reward(item) in that category column\n    drop: (item, monitor) => {\n      item.catID !== undefined ? changeRewardPos(item.createID, index) : createNewRewardObject(index, item);\n    }\n  });\n  return (\n    <div className=\"category-item\">\n      <div className=\"category-name\">{name}</div>\n      <div className=\"category-lane\" ref={drop}>\n        {showRewards(index)}\n      </div>\n    </div>\n  );\n}\n\nexport default Category;\n","import React from 'react';\nimport { useState, useEffect } from \"react\";\nimport logo from './logo.svg';\nimport './App.css';\nimport Category from './category';\nimport Rewards from './rewards';\n\nfunction App() {\n  const rewards = [\"R1\", \"R2\", \"R3\", \"R4\", \"R5\"];\n  const categories = [\"C1\", \"C2\", \"C3\", \"C4\", \"C5\"];\n  // using hooks makes it simpler so no need for writing classes to set state\n  const [initializedRewards, setInitializedRewards] = useState(() => {\n    let savedrewards = window.localStorage.getItem(\"savedRewards\") || [];\n    if (savedrewards.length !== 0) {\n      savedrewards = JSON.parse(savedrewards);\n    }\n    return savedrewards;\n  });\n  const [AmountOfRewards, setAmountOfRewards] = useState(() => {\n    let savedAmountOfRewards = window.localStorage.getItem(\"numberRewards\") || 0;\n    if (savedAmountOfRewards !== 0) {\n      savedAmountOfRewards = JSON.parse(savedAmountOfRewards);\n    }\n    return savedAmountOfRewards;\n  });\n\n  useEffect(() => {\n    //must serialize(turn into a string) the object or array for storage, toString method also works\n    window.localStorage.setItem(\"savedRewards\", JSON.stringify(initializedRewards));\n    window.localStorage.setItem(\"numberReward\", JSON.stringify(AmountOfRewards));\n  }, [initializedRewards, AmountOfRewards]); //useEffect will happen with any change of these two variables\n\n  function showRewards(catID) {\n    console.log(initializedRewards);\n    return initializedRewards.map((reward, idx) => {\n      if (reward.catID === catID) {\n        return (\n          <Rewards\n            key={idx}\n            name={reward.name}\n            createID={reward.createID}\n            idx={reward.idx}\n            catID={catID}\n            changeRewardPos={changeRewardPos}\n          />\n        );\n      }\n    });\n  }\n\n  //Not fully implemented as of now removes last added reward\n  function undoReward(){\n  \tlet currRewards = Object.assign([], initializedRewards);\n  \tcurrRewards.pop()\n  \tsetInitializedRewards(currRewards)\n  }\n\n  // creates new reward in specific category depending on ID and item is the current rewward\n  function createNewRewardObject(categoryIdx, item) {\n    let currRewards = Object.assign([], initializedRewards);// all the curr rewards \n    let rewardID = item.idx;\n\n    // checks if any of the previous rewards placed are the same for that category\n    //if not then creates new reward\n    if (\n      !currRewards.some((reward) => {\n        return reward.idx === rewardID && reward.catID === categoryIdx;\n      })\n    ) {\n      let newReward = {\n        name: item.name,\n        idx: item.idx,\n        createID: AmountOfRewards + 1,\n        catID: categoryIdx,\n      };\n\n      currRewards.push(newReward);\n      setInitializedRewards(currRewards);\n      setAmountOfRewards(AmountOfRewards + 1);\n    }\n  }\n\n  //updates the position of the reward if changed\n  function changeRewardPos(createID, categoryIdx) {\n    let currRewards = Object.assign([], initializedRewards);\n    let rewardIdx = currRewards.findIndex((reward) => reward.createID === createID);\n\n    if (categoryIdx !== undefined) {\n      let reward = currRewards[rewardIdx];\n      //checks if we can move to chosen column if yes then reasigns the reward category ID\n      //to the new category column\n      if (\n        !currRewards.some((item) => {\n          return item.idx === reward.idx && item.catID === categoryIdx;\n        })\n      ) {\n        console.log(reward);\n        reward.catID = categoryIdx;\n      }// the next else is if the reward is already found  in the category column\n      else {\n        return;\n      }\n      //this else is for the option of deleting\n    } else {\n      currRewards.splice(rewardIdx, 1);\n    }\n    //each change updates initialized rewards\n    setInitializedRewards(currRewards);\n  }\n\n\n  return (\n    <div className=\"App\">\n      <div className=\"table\">\n        <div className=\"rewards\">\n          <span className=\"rewardTitle\">Rewards</span>\n          {rewards.map((name, idx) => {\n            return <Rewards key={idx} idx={idx} name={name} />;\n          })}\n        </div>\n        <div className=\"categories\">\n          <span className=\"categoryTitle\">Categories</span>\n          <div className=\"categoryContent\">\n            {categories.map((name, idx) => {\n              return (\n                <Category\n                  key={idx}\n                  name={name}\n                  index={idx}\n                  showRewards={showRewards}\n                  createNewRewardObject={createNewRewardObject}\n                  changeRewardPos={changeRewardPos}\n                />\n              );\n            })}\n          </div>\n        </div>\n        <button onClick={undoReward}>UNDO</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { DndProvider } from 'react-dnd';\nimport { HTML5Backend } from 'react-dnd-html5-backend';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <DndProvider backend={HTML5Backend}>\n      <App/>\n    </DndProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}